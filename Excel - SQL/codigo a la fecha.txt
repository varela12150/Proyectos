CAS = 'values (\''+str(df.ACCOUNT_NUMBER[h])+'\''+', \''+str(df.BRANCH_CODE[h])+'\''+', \''+str(df.COMPONENT_NAME[h])+'\''+', '+("null" if str(df.FORMULA_NAME[h]) == str(nan) else '\''+str(df.FORMULA_NAME[h])+'\'')+', '+("null" if str(df.SCHEDULE_TYPE[h]) == str(nan) else '\''+str(df.SCHEDULE_TYPE[h])+'\'')+ ', '+'to_date(\''+str("{:02d}".format(int(df.SCHEDULE_ST_DATE[h].day)))+'-'+str("{:02d}".format(int(df.SCHEDULE_ST_DATE[h].month)))+'-'+str("{:04d}".format(int(df.SCHEDULE_ST_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+'to_date(\''+str("{:02d}".format(int(df.SCHEDULE_DUE_DATE[h].day)))+'-'+str("{:02d}".format(int(df.SCHEDULE_DUE_DATE[h].month)))+'-'+str("{:04d}".format(int(df.SCHEDULE_DUE_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+("null" if str(df.GRACE_DAYS[h]) == str(nan) else str(df.GRACE_DAYS[h]))+', '+("null" if str(df.ORIG_AMOUNT_DUE[h]) == str(nan) else str(df.ORIG_AMOUNT_DUE[h]))+', '+("null" if str(df.AMOUNT_DUE[h]) == str(nan) else str(df.AMOUNT_DUE[h]))+', '+("null" if str(df.ADJ_AMOUNT[h]) == str(nan) else str(df.ADJ_AMOUNT[h]))+', '+("null" if str(df.AMOUNT_SETTLED[h]) == str(nan) else str(df.AMOUNT_SETTLED[h]))+', '+("null" if str(df.AMOUNT_OVERDUE[h]) == str(nan) else str(df.AMOUNT_OVERDUE[h]))+', '+("null" if str(df.ACCRUED_AMOUNT[h]) == str(nan) else str(df.ACCRUED_AMOUNT[h]))+', '+'\''+str(df.SETTLEMENT_CCY[h])+'\''+', '+("null" if str(df.LCY_EQUIVALENT[h]) == str(nan) else str(df.LCY_EQUIVALENT[h]))+', '+("null" if str(df.DLY_AVG_AMT[h]) == str(nan) else str(df.DLY_AVG_AMT[h]))+', '+("null" if str(df.EMI_AMOUNT[h]) == str(nan) else str(df.EMI_AMOUNT[h]))+', '+("null" if str(df.SCHEDULE_FLAG[h]) == str(nan) else '\''+str(df.SCHEDULE_FLAG[h])+'\'')+', '+("null" if str(df.WAIVER_FLAG[h]) == str(nan) else '\''+str(df.WAIVER_FLAG[h])+'\'')+', '+("null" if str(df.EVENT_SEQ_NO[h]) == str(nan) else str(df.EVENT_SEQ_NO[h]))+', '+("null" if str(df.SCHEDULE_LINKAGE[h]) == 'NaT' else 'to_date(\''+str("{:02d}".format(int(df.SCHEDULE_LINKAGE[h].day)))+'-'+str("{:02d}".format(int(df.SCHEDULE_LINKAGE[h].month)))+'-'+str("{:04d}".format(int(df.SCHEDULE_LINKAGE[h].year)))+'\', \'dd-mm-yyyy\')')+', '+("null" if str(df.CAPITALIZED[h]) == str(nan) else '\''+str(df.CAPITALIZED[h])+'\'')+', '+("null" if str(df.PROCESS_NO[h]) == str(nan) else str(df.PROCESS_NO[h]))+', '+("null" if str(df.AMOUNT_READJUSTED[h]) == str(nan) else str(df.AMOUNT_READJUSTED[h]))+', '+("null" if str(df.ADJ_SETTLED[h]) == str(nan) else '\''+str(df.ADJ_SETTLED[h])+'\'')+', '+("null" if str(df.SCH_STATUS[h]) == str(nan) else str(df.SCH_STATUS[h]))+', '+("null" if str(df.ACCOUNT_GL[h]) == str(nan) else '\''+str(df.ACCOUNT_GL[h])+'\'')+', '+("null" if str(df.LAST_PMNT_VALUE_DATE[h]) == 'NaT' else 'to_date(\''+str("{:02d}".format(int(df.LAST_PMNT_VALUE_DATE[h].day)))+'-'+str("{:02d}".format(int(df.LAST_PMNT_VALUE_DATE[h].month)))+'-'+str("{:04d}".format(int(df.LAST_PMNT_VALUE_DATE[h].year)))+'\', \'dd-mm-yyyy\')')+', '+("null" if str(df.RETRY_START_DATE[h]) == 'NaT' else 'to_date(\''+str("{:02d}".format(int(df.RETRY_START_DATE[h].day)))+'-'+str("{:02d}".format(int(df.RETRY_START_DATE[h].month)))+'-'+str("{:04d}".format(int(df.RETRY_START_DATE[h].year)))+'\', \'dd-mm-yyyy\')')+', '+("null" if str(df.MORA_INT[h]) == str(nan) else str(df.MORA_INT[h]))+', '+("null" if str(df.SCHEDULE_NO[h]) == str(nan) else str(df.SCHEDULE_NO[h]))+', '+("null" if str(df.WRITEOFF_AMT[h]) == str(nan) else str(df.WRITEOFF_AMT[h]))+', '+("null" if str(df.READJ_SETTLED[h]) == str(nan) else str(df.READJ_SETTLED[h]))+', '+("null" if str(df.LAST_READJ_XRATE[h]) == str(nan) else str(df.LAST_READJ_XRATE[h]))+', '+("null" if str(df.SUSP_AMT_DUE[h]) == str(nan) else str(df.SUSP_AMT_DUE[h]))+', '+("null" if str(df.SUSP_AMT_SETTLED[h]) == str(nan) else str(df.SUSP_AMT_SETTLED[h]))+', '+("null" if str(df.SUSP_AMT_LCY[h]) == str(nan) else str(df.SUSP_AMT_LCY[h]))+', '+("null" if str(df.SUSP_READ_AMT[h]) == str(nan) else str(df.SUSP_READ_AMT[h]))+', '+("null" if str(df.SUSP_READ_SETTLED[h]) == str(nan) else str(df.SUSP_READ_SETTLED[h]))+', '+("null" if str(df.LAST_SUSP_XRATE[h]) == str(nan) else str(df.LAST_SUSP_XRATE[h]))+', '+("null" if str(df.AMOUNT_WAIVED[h]) == str(nan) else str(df.AMOUNT_WAIVED[h]))+', '+("null" if str(df.IRR_APPLICABLE[h]) == str(nan) else '\''+str(df.IRR_APPLICABLE[h])+'\'')+', '+("null" if str(df.LIST_DAYS[h]) == str(nan) else str(df.LIST_DAYS[h]))+', '+("null" if str(df.LIST_AVG_AMT[h]) == str(nan) else str(df.LIST_AVG_AMT[h]))+', '+("null" if str(df.PAY_BY_DATE[h]) == str(nan) else str(df.PAY_BY_DATE[h]))+');'


CACB = 'values (\''+str(df.ACCOUNT_NUMBER[h])+'\''+', '+'\''+str(df.BRANCH_CODE[h])+'\''+', '+'\''+str(df.COMPONENT[h])+'\''+', '+'\''+str(df.GL_CODE[h])+'\''+', '+'\''+str(df.GL_TYPE[h])+'\''+', '+("null" if str(df.BALANCE[h]) == str(nan) else str(df.BALANCE[h]))+', '+("null" if str(df.LCY_BALANCE[h]) == str(nan) else str(df.LCY_BALANCE[h]))+', '+'to_date(\''+str("{:02d}".format(int(df.CREATION_DATE[h].day)))+'-'+str("{:02d}".format(int(df.CREATION_DATE[h].month)))+'-'+str("{:04d}".format(int(df.CREATION_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+ ', '+'\''+str(df.STATUS_CODE[h])+'\''+', '+("null" if str(df.SEVERITY_LEVEL[h]) == str(nan) else str(df.SEVERITY_LEVEL[h]))+', '+("null" if str(df.CONT_OFFSET_GL[h]) == str(nan) else str(df.CONT_OFFSET_GL[h]))+', '+'\''+str(df.BALANCE_FLAG[h])+'\''+', '+'\''+str(df.GAAP_INDICATOR[h])+'\''+');' 



CACC = 'values (\''+str(df.BRANCH_CODE[h])+'\''+', '+'\''+str(df.ACCOUNT_NUMBER[h])+'\''+', '+'\''+str(df.COMPONENT_NAME[h])+'\''+', '+'\''+str(df.FORMULA_NAME[h])+'\''+', '+'to_date(\''+str("{:02d}".format(int(df.SCH_DUE_DATE[h].day)))+'-'+str("{:02d}".format(int(df.SCH_DUE_DATE[h].month)))+'-'+str("{:04d}".format(int(df.SCH_DUE_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+'to_date(\''+str("{:02d}".format(int(df.START_DATE[h].day)))+'-'+str("{:02d}".format(int(df.START_DATE[h].month)))+'-'+str("{:04d}".format(int(df.START_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+'to_date(\''+str("{:02d}".format(int(df.END_DATE[h].day)))+'-'+str("{:02d}".format(int(df.END_DATE[h].month)))+'-'+str("{:04d}".format(int(df.END_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+("null" if str(df.NO_OF_DAYS[h]) == str(nan) else str(df.NO_OF_DAYS[h]))+', '+'\''+str(df.PRODUCT[h])+'\''+', '+'\''+str(df.CURRENCY[h])+'\''+', '+'\''+str(df.EXPR_LINE[h])+'\''+', '+("null" if str(df.ACCR_TILL_DATE[h]) == str(nan) else str(df.ACCR_TILL_DATE[h]))+', '+("null" if str(df.DLY_AVG_AMT[h]) == str(nan) else str(df.DLY_AVG_AMT[h]))+', '+'\''+str(df.IS_DUE_TO_SUB_COMP[h])+'\''+', '+'to_date(\''+str("{:02d}".format(int(df.SCH_START_DATE[h].day)))+'-'+str("{:02d}".format(int(df.SCH_START_DATE[h].month)))+'-'+str("{:04d}".format(int(df.SCH_START_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+'\''+str(df.FORMULA_GROUP[h])+'\''+');'


SCH = 'values (\''+str(df.ACCOUNT_NUMBER[h])+'\''+', '+'\''+str(df.BRANCH_CODE[h])+'\''+', '+'\''+str(df.COMPONENT_NAME[h])+'\''+', '+'\''+str(df.SCHEDULE_TYPE[h])+'\''+', '+'\''+str(df.SCHEDULE_FLAG[h])+'\''+', '+("null" if str(df.FORMULA_NAME[h]) == str(nan) else '\''+str(df.FORMULA_NAME[h])+'\'')+', '+'to_date(\''+str("{:02d}".format(int(df.SCH_START_DATE[h].day)))+'-'+str("{:02d}".format(int(df.SCH_START_DATE[h].month)))+'-'+str("{:04d}".format(int(df.SCH_START_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+("null" if str(df.NO_OF_SCHEDULES[h]) == str(nan) else str(df.NO_OF_SCHEDULES[h]))+', '+("null" if str(df.FREQUENCY[h]) == str(nan) else str(df.FREQUENCY[h]))+', '+("null" if str(df.UNIT[h]) == str(nan) else '\''+str(df.UNIT[h])+'\'')+', '+'to_date(\''+str("{:02d}".format(int(df.SCH_START_DATE[h].day)))+'-'+str("{:02d}".format(int(df.SCH_END_DATE[h].month)))+'-'+str("{:04d}".format(int(df.SCH_END_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+("null" if str(df.AMOUNT[h]) == str(nan) else str(df.AMOUNT[h]))+', '+("null" if str(df.PAYMENT_MODE[h]) == str(nan) else str(df.PAYMENT_MODE[h]))+', '+("null" if str(df.PMNT_PROD_AC[h]) == str(nan) else str(df.PMNT_PROD_AC[h]))+', '+("null" if str(df.PAYMENT_DETAILS[h]) == str(nan) else str(df.PAYMENT_DETAILS[h]))+', '+("null" if str(df.BEN_ACCOUNT[h]) == str(nan) else str(df.BEN_ACCOUNT[h]))+', '+("null" if str(df.BEN_BANK[h]) == str(nan) else str(df.BEN_BANK[h]))+', '+("null" if str(df.BEN_NAME[h]) == str(nan) else str(df.BEN_NAME[h]))+', '+("null" if str(df.CAPITALIZED[h]) == str(nan) else '\''+str(df.CAPITALIZED[h])+'\'')+', '+'to_date(\''+str("{:02d}".format(int(df.FIRST_DUE_DATE[h].day)))+'-'+str("{:02d}".format(int(df.FIRST_DUE_DATE[h].month)))+'-'+str("{:04d}".format(int(df.FIRST_DUE_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+("null" if str(df.WAIVER_FLAG[h]) == str(nan) else '\''+str(df.WAIVER_FLAG[h])+'\'')+', '+("null" if str(df.COMPOUND_DAYS[h]) == str(nan) else str(df.COMPOUND_DAYS[h]))+', '+("null" if str(df.COMPOUND_MONTHS[h]) == str(nan) else str(df.COMPOUND_MONTHS[h]))+', '+("null" if str(df.COMPOUND_YEARS[h]) == str(nan) else str(df.COMPOUND_YEARS[h]))+', '+("null" if str(df.EMI_AMOUNT[h]) == str(nan) else str(df.EMI_AMOUNT[h]))+', '+("null" if str(df.DUE_DATES_ON[h]) == str(nan) else str(df.DUE_DATES_ON[h]))+', '+("null" if str(df.DAYS_MTH[h]) == str(nan) else str(df.DAYS_MTH[h]))+', '+("null" if str(df.DAYS_YEAR[h]) == str(nan) else str(df.DAYS_YEAR[h]))+', '+("null" if str(df.DP_AMOUNT[h]) == str(nan) else str(df.DP_AMOUNT[h]))+', '+("null" if str(df.PAY_MODE[h]) == str(nan) else str(df.PAY_MODE[h]))+', '+("null" if str(df.PAYABLE_ACC[h]) == str(nan) else str(df.PAYABLE_ACC[h]))+', '+("null" if str(df.EXCH_RATE[h]) == str(nan) else str(df.EXCH_RATE[h]))+', '+("null" if str(df.PAYABLE_ACC_CCY[h]) == str(nan) else str(df.PAYABLE_ACC_CCY[h]))+', '+("null" if str(df.EMI_AS_PERCENTAGE_SALARY[h]) == str(nan) else str(df.EMI_AS_PERCENTAGE_SALARY[h]))+');'


CACBA = 'values (\''+str(df.BRANCH_CODE[h])+'\''+', '+'\''+str(df.ACCOUNT_NUMBER[h])+'\''+', '+'\''+str(df.COMPONENT_NAME[h])+'\''+', '+'to_date(\''+str("{:02d}".format(int(df.VAL_DATE[h].day)))+'-'+str("{:02d}".format(int(df.VAL_DATE[h].month)))+'-'+str("{:04d}".format(int(df.VAL_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+("null" if str(df.BALANCE[h]) == str(nan) else str(df.BALANCE[h]))+');'


CADC = 'values (\''+str(df.ACCOUNT_NUMBER[h])+'\''+', '+'\''+str(df.BRANCH_CODE[h])+'\''+', '+'\''+str(df.COMPONENT_NAME[h])+'\''+', '+'to_date(\''+str("{:02d}".format(int(df.COMPOUNDING_DATE[h].day)))+'-'+str("{:02d}".format(int(df.COMPOUNDING_DATE[h].month)))+'-'+str("{:04d}".format(int(df.COMPOUNDING_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+'to_date(\''+str("{:02d}".format(int(df.SCHEDULE_ST_DATE[h].day)))+'-'+str("{:02d}".format(int(df.SCHEDULE_ST_DATE[h].month)))+'-'+str("{:04d}".format(int(df.SCHEDULE_ST_DATE[h].year)))+'\', \'dd-mm-yyyy\')'+', '+("null" if str(df.AMOUNT[h]) == str(nan) else str(df.AMOUNT[h]))+');'